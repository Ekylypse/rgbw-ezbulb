substitutions:
  name: kauf-bulb
  friendly_name: Kauf Bulb

esp8266:                       # https://esphome.io/components/esp8266.html
  board: esp01_1m
  restore_from_flash: true

  framework:                   # provides updated PWM logic per https://github.com/esp8266/Arduino/pull/7231
    version: 3.0.2             # https://github.com/esp8266/Arduino/releases
    platform_version: 3.2.0    # https://github.com/platformio/platform-espressif8266/releases/

external_components:
  - source:
      type: git
      url: https://github.com/KaufHA/kauf-rgbww-bulbs
    refresh: 0s
  # - source:
  #     type: local
  #     path: kauf_rgbww_components
      
dashboard_import:
  package_import_url: github://KaufHA/kauf-rgbww-bulbs/kauf-bulb.yaml

esphome:

  name: $name

  name_add_mac_suffix: true

  project:
    name: "kauf.rgbww"
    version: "1.72u"

  on_boot:
    then:

      - lambda: |-

          // restore light state per setting.  Default is to restore previous state so we don't need an action for that.
          if (id(select_boot_state).state == "Always On - Last Value") {
            auto call = id(kauf_light).turn_on();
            call.perform();
          }
          else if (id(select_boot_state).state == "Always On - Bright White") {
            auto call = id(kauf_light).turn_on();
            call.set_color_mode(ColorMode::COLOR_TEMPERATURE);
            call.set_color_temperature(150);
            call.set_brightness(1.0);
            call.perform();
          }
          else if (id(select_boot_state).state == "Always Off") {
            auto call = id(kauf_light).turn_off();
            call.perform();
          }

          // turn on WLED if effect is selected
          if ( id(effect).state == "WLED / DDP" ) { id(kauf_light)->set_use_wled(); }


      # Wait until ESPHome tries loading wifi credentials before going on with WiFi AP logic.
      - wait_until:
          lambda: 'return ( wifi_wificomponent->tried_loading_creds );'

      - if:
          condition: # don't do anything if credentials were loaded unless force_ap is on as an override
            lambda: 'return ( wifi_wificomponent->loaded_creds && !id(force_ap) );'

          # if we don't need AP 
          then:
            - logger.log: "------------------->>>>>>>>>>>>>>>>>   wifi already configured, leaving ap timeout cranked"

            - globals.set:  # set global so if wifi never connects we'll have AP next time.
                id: force_ap
                value: 'true'
            - script.execute: save_changes

            - wait_until:
                wifi.connected
            - globals.set:  # clear global so we won't have AP next time
                id: force_ap
                value: 'false'
            - script.execute: save_changes


          # if we do need AP 
          else:           # if credentials not loaded or force_ap is set, lower ap timeout to allow saving new credentials
            - logger.log: "------------------->>>>>>>>>>>>>>>>>   wifi not configured, enabling ap and waiting"
            
            # always turn on light if turning on AP
            - light.turn_on: kauf_light

              # set ap timeout to 15 seconds in milliseconds.
            - lambda: 'wifi_wificomponent->set_ap_timeout(15000);'
            - wait_until:
                wifi.connected
            - globals.set:  # clear global so ap doesn't come back up next time
                id: force_ap
                value: 'false'
            - script.execute: save_changes

              # set ap timeout to max 32 bit value in milliseconds.  About 3.5 weeks.
            - logger.log: "------------------->>>>>>>>>>>>>>>>>   wifi connected, cranking ap timeout back up"
            - lambda: 'wifi_wificomponent->set_ap_timeout(2147483647);'


globals:
  - id: force_ap
    type: bool
    restore_value: yes
    initial_value: "true"
    

button:
  - platform: restart
    id: restart_button
    name: $friendly_name Restart Firmware
    entity_category: diagnostic
    disabled_by_default: true
  - platform: template
    id: clear_wifi_button
    name: $friendly_name Clear Wifi Credentials
    entity_category: diagnostic
    disabled_by_default: true
    on_press:
      then:
        script.execute: clear_wifi_script

wifi:

  ssid: initial_ap2          # !secret wifi_ssid
  password: asdfasdfasdfasdf # !secret wifi_pass

  # use_address allows wireless programming through dashboard.
  # Set to the bulb's IP Address.  Remove after programming.
  # use_address: 192.168.86.207

  # default is 20, 17 is recommended.
  output_power: 17

  ap:
    ssid: ${friendly_name} Hotspot
    ap_timeout: 2147483647ms      # maximum 32 bit value.  About 3.5 weeks in milliseconds.

captive_portal:
logger:
  # level: verbose
api:
ota:
debug:

web_server:
  css_include: "webserver-v1.min.css"
  css_url: ""
  js_include: "webserver-v1.min.js"
  js_url: ""


# PWM outputs for each LED channel
output:
  - platform: esp8266_pwm
    pin: GPIO4
    frequency: 1000 Hz
    id: pwm_red
  - platform: esp8266_pwm
    pin: GPIO12
    frequency: 1000 Hz
    id: pwm_green
  - platform: esp8266_pwm
    pin: GPIO14
    frequency: 1000 Hz
    id: pwm_blue
  - platform: esp8266_pwm
    pin: GPIO5
    frequency: 1000 Hz
    id: pwm_cw
  - platform: esp8266_pwm
    pin: GPIO13
    frequency: 1000 Hz
    id: pwm_ww




light:

# Additive RGB light for Warm White
- platform: kauf_rgbww
  id: warm_rgb
  entity_category: config
  default_transition_length: 0ms
  aux: true
  name: $friendly_name Warm RGB

# Additive RGB light for Cold White
- platform: kauf_rgbww
  id: cold_rgb
  entity_category: config
  default_transition_length: 0ms
  aux: true
  name: $friendly_name Cold RGB

# Main RGBWW light
- platform: kauf_rgbww
  id: kauf_light
  default_transition_length: 250ms
  name: $friendly_name
  red: pwm_red
  green: pwm_green
  blue: pwm_blue
  warm_white: pwm_ww
  cold_white: pwm_cw
  warm_rgb: warm_rgb
  cold_rgb: cold_rgb

select:

  # default light state on boot
  - platform: template
    name: $friendly_name Power On State
    id: select_boot_state
    optimistic: true
    options:
      - "Restore Power Off State"
      - "Always On - Last Value"
      - "Always On - Bright White"
      - "Always Off"
    # defaulting to always on is nice so you know new bulbs are working
    initial_option: "Always On - Bright White"
    restore_value: true
    icon: mdi:restart-alert
    set_action:
      - script.execute: save_changes
    entity_category: config


  - platform: template
    name: $friendly_name Effect
    id: effect
    optimistic: true
    options:
      - "None"
      - "WLED / DDP"
    initial_option: "None"
    restore_value: true
    icon: mdi:string-lights
    set_action:

      - lambda: |-
          if ( x == "None" )       { id(kauf_light)->clr_use_wled(); }
          if ( x == "WLED / DDP" ) { id(kauf_light)->set_use_wled(); }

      - script.execute: save_changes
      
    entity_category: config


sensor:
  - platform: uptime
    name: $friendly_name Uptime
    update_interval: 60s
    entity_category: diagnostic
    disabled_by_default: true


# Send IP Address to HA.  Disabled by default, not as important now that Home Assistant provides link.
text_sensor:
  - platform: wifi_info
    ip_address:
      name: $friendly_name IP Address
      entity_category: diagnostic
      disabled_by_default: true


script:
  - id: save_changes
    mode: restart
    then:
      - delay: 3s
      - lambda: 'global_preferences->sync();'
  - id: clear_wifi_script
    then:
      - lambda: 'wifi_wificomponent->clear_stored_creds();'
      - delay: 2s
      - button.press: restart_button
