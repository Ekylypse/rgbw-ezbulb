packages:
  kauf_bulb_base:
    url: https://github.com/KaufHA/kauf-rgbww-bulbs
    files: kauf-bulb.yaml
    refresh: 0s

# external components need to be re-added so that they are all included.
external_components:
  - source:
      type: git
      url: https://github.com/KaufHA/kauf-rgbww-bulbs
    refresh: 0s
  # - source:
  #     type: local
  #     path: kauf_rgbww_components

dashboard_import:
  package_import_url: github://KaufHA/kauf-rgbww-bulbs/kauf-bulb.yaml

esphome:
  name_add_mac_suffix: true

  # overwrite project for different letter suffix
  project:
    name: "kauf.rgbww"
    version: "1.72u"

  # add wifi handling on boot, which is not needed for dashboard import version
  on_boot:
    then:

      # Wait until ESPHome tries loading wifi credentials before going on with WiFi AP logic.
      - wait_until:
          lambda: 'return ( wifi_wificomponent->tried_loading_creds );'

      - if:
          condition: # don't do anything if credentials were loaded unless force_ap is on as an override
            lambda: 'return ( wifi_wificomponent->loaded_creds && !id(force_ap) );'

          # if we don't need AP 
          then:
            - logger.log: "------------------->>>>>>>>>>>>>>>>>   wifi already configured, leaving ap timeout cranked"

            - globals.set:  # set global so if wifi never connects we'll have AP next time.
                id: force_ap
                value: 'true'
            - script.execute: save_changes

            - wait_until:
                wifi.connected
            - globals.set:  # clear global so we won't have AP next time
                id: force_ap
                value: 'false'
            - script.execute: save_changes


          # if we do need AP 
          else:           # if credentials not loaded or force_ap is set, lower ap timeout to allow saving new credentials
            - logger.log: "------------------->>>>>>>>>>>>>>>>>   wifi not configured, enabling ap and waiting"
            
            # always turn on light if turning on AP
            - light.turn_on: kauf_light

              # set ap timeout to 15 seconds in milliseconds.
            - lambda: 'wifi_wificomponent->set_ap_timeout(15000);'
            - wait_until:
                wifi.connected
            - globals.set:  # clear global so ap doesn't come back up next time
                id: force_ap
                value: 'false'
            - script.execute: save_changes

              # set ap timeout to max 32 bit value in milliseconds.  About 3.5 weeks.
            - logger.log: "------------------->>>>>>>>>>>>>>>>>   wifi connected, cranking ap timeout back up"
            - lambda: 'wifi_wificomponent->set_ap_timeout(2147483647);'


globals:
  - id: force_ap
    type: bool
    restore_value: yes
    initial_value: "true"
    

# add new button to clear wifi credentials.  Not needed in dashboard import
# version as credentials are hard coded
button:
  - platform: template
    id: clear_wifi_button
    name: $friendly_name Clear Wifi Credentials
    entity_category: diagnostic
    disabled_by_default: true
    on_press:
      then:
      - lambda: 'wifi_wificomponent->clear_stored_creds();'
      - delay: 2s
      - button.press: restart_button

# re-adding wifi component so that hotspot will be enabled
wifi:
  # enable wifi ap, which was not needed in dashboard import version
  ap:
    ssid: ${friendly_name} Hotspot
    ap_timeout: 2147483647ms      # maximum 32 bit value.  About 3.5 weeks in milliseconds.

  # by default, fast_connect is disabled.  Will automatically be enabled by wifi component
  # needs to be set false here as dashboard import version sets true
  fast_connect: false

# captive portal not used in dashboard import version
captive_portal:

# re-adding web_server component so that css and js files will be included on-device.
# dashboard import version uses the ESPHome hosted ones.
web_server:
  css_include: "webserver-v1.min.css"
  css_url: ""
  js_include: "webserver-v1.min.js"
  js_url: ""